[{
  "section": "Blog",
  "slug": "/blog/blog/",
  "title": "Blog",
  "description": "",
  "date": "May 19, 2024",
  "image": null,
  "imageSM": null,
  "searchKeyword": "",
  "categories": "",
  "tags": "",
  "content":""},{
  "section": "Blog",
  "slug": "/blog/04-headfirstjava%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/",
  "title": "HeadFirstJAVA知识点整理",
  "description": "this is meta description",
  "date": "April 4, 2022",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_420x0_resize_q80_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"184\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_100x100_fill_q80_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Technology, Data",
  "tags": "technology, tailwind",
  "content":"HeadFirstJAVA知识点整理 数据类型 primitive主数据类型 类型 位数 值域 boolean JAVA虚拟机决定 true/false char 16bits 0~65535 byte 8bits -128~127 short 16bits -32768~32767 int 32bits -2147483648~2147483647 long 64bit float 32bits 范围可变 double 64bits 范围可变 数字的格式化 /** %[argument number][flags][width][.precision]type * @argument number: * @flags：特定类型的特定选项，例如数字要加逗号或正负号。 * @width：最小的字符数，注意，不是总数，输出可以超过此宽度，不足则会主动补零。 * @.precision：精确度 */ String s = String.format(\u0026#34;%,d\u0026#34;, 10000000); %,d这代表以十进制整数带有逗号的方式来表示。 %.2f这代表以小数点后两位的方式来格式化此浮点数。 %.2f这代表整数部分以有逗号的形式表示，小数部分以两位来格式化。 %x以十六进制输出。 对象引用 对象引用变量是以字节来表示取得对象的方法。 对于任意一个Java虚拟机而言，所有的引用大小相同，但不同虚拟机的引用大小可能不同。 创建对象三个步骤 声明一个引用变量 创建一个对象 连接对象和引用 方法 参数和返回值 传入与传出方法的值类型可以隐含地放大（用byte当做int类型的返回值）或是明确地缩小（如果是把int当作byte类型返回值则需要进行明确的转换）。\n操作变量 实例变量初始值 实例变量永远都有默认值（可以不初始化）： integers 0 floating points 0.0 boolean false references null 实例变量和局部变量差别 实例变量声明在类内而不是方法中。 局部变量是声明在方法中的。 局部变量使用前必须要初始化。 变量的比较 使用==来比较两个primitive主数据类型是否相等，或两个引用是否引用到堆上的同一个对象。 使用equals()来判断两个对象是否在意义上相等。 继承 子类调用方法，Java虚拟机会从继承关系树形图最下方开始搜索方法（简单来说就是子类有重写过就调用子类的，否则就找父类）。\npublic类型的成员会被继承，private类型成员不会被继承。\n在子类中引用父类的方法再加上额外的行为：在子类重写的xx()中先调用super.xx()，然后补充自己的代码。\n是否像类成员一样，如果类是私有的就不能继承？\n除了内部类以外，并没有私有类的概念，但有三种方法可以防止某个类被作出子类： 存取控制：将类不标记为公开，非公有的类只能被同一个包的类作出子类。 用final修饰，表示它是继承树的末端，不能被继承。用final修饰整个类，所有的方法都不能被覆盖；用final修饰某一个方法，该方法不能被覆盖。 让类只拥有private的构造函数。 重载（overload）与方法重写（override）不同：\n重载要求：\n返回类型可以不同。 不能只改变返回类型。 可以更改存取权限。 重写要求：\n参数必须一样，且返回类型必须要兼容。 不能降低方法的存取权限（不能覆盖掉一个共有的方法并将它标记为私有）。 多态（polymorphism） 多态下，引用和对象可以是不同类型，**引用类型（编译类型）可以是实际对象类型（运行类型）**的父类。\nAnimal myDog = new Dog(); 方法参数可以多态，声明一个父类的引用对象，并赋子类对象给它。\n抽象类 通过标记类为抽象类，编译器就知道这个类不能创建实例。\n抽象类除了被继承以外，没有用途，没有值，没有目的（除了抽象的class可以有static成员）。\n可以使用抽象类来声明为引用类型给多态使用。\nabstract class Dog extends Animal { } class LittleDog extends Dog { } public class MakeLittleDog { public void go() { Dog d = new LittleDog; } } 非抽象类不能有抽象方法，有抽象方法一定要把类也标记成抽象的。\npublic abstract void eat(); 抽象方法的意义是就算无法实现出方法的内容，但还是可以定义出一组子型共同的协议。\n抽象的方法一定要被覆盖，或者也用abstract标记，交给子类去实现（如果有）。\n抽象类可以带有抽象和非抽象的方法（即子类不一定要实现抽象父类的所有方法）。\nObject类 Object类的目的 作为多态让方法可以应付多种类型的机制。 提供Java在执行期对任何对象都有需要的方法的实现程序代码（toString()\u0026hellip;）。 代价 任何从ArrayList\u0026lt;Object\u0026gt;取出的东西都会被当作Object类型的引用。\n编译器是根据引用类型（编译类型）来判断有哪些方法可以调用，即不能调用实际类型的方法。\n可以转换回原来的实际类型，如果不能确定能不能转，可以用instanceof这个运算符来检查：\nif (o instanceof Dog) { Dog d = (Dog)o; } 接口 接口就像是100%的纯抽象类。\n接口方法带有public和abstract的意义，可以不标。\n接口方法一定是抽象的，没有内容，以括号和分号结尾。\npublic interface Runnable { //以下的public和abstract可以不标出来 public abstract void run(); } 接口的意义在于：大部分良好的设计不需要在抽象的层次定义出实现细节，需要的知识一个共同的合约定义。让细节在具体的子类上实现也是很合理的。\n构造器与GC 堆栈 栈：方法调用、局部变量、对象引用变量与primitive主数据类型变量。 堆：所有的对象。 构造函数 唯一能在构造函数外调用构造函数的方式是新建一个对象。 每个构造函数可以选择调用super()或this()，但不能同时调用。 GC 三种方式释放对象的引用：\n引用永久性地离开它的范围。\n//z会在go()方法执行结束时消失 void go(){ Life z = new Life(); } 引用被赋值到其他的对象上，即指向了另外个对象。\n将引用设置为null。\n静态 静态方法 静态的方法无法调用非静态的变量，静态的方法是不知道堆上有哪些实例（或者该类根本没实例对象）；但静态方法内可以声明局部变量。 静态的方法也不能调用非静态的方法，原因类似，非静态的方法是与实例对象有关的。 静态变量 静态变量会在类第一次加载的时候进行初始化，与该类所有实例对象共享（可以用来计算创建对象的个数）。 静态变量会在该类的任何静态方法执行之前或在该类的任何对象创建之前就初始化。 Java虚拟机会加载某个类是因为第一次有人要创建该类的实例对象，或是使用该类的静态方法或变量。 如果没有给静态变量赋初值，它就会被设置为默认值（与primitive主数据类型一样）。 静态final Java的常数定义\n常数变量的名称应该要都是大写字母，并以下划线字符分隔，如FOO_X。\n静态final变量初始化的两种方式：\n声明的时候：\npublic class Foo { public static final int FOO_X = 25; } 在静态初始化程序(static initializer)中，这是一段在加载类时会执行的程序代码：\npublic class Bar { public static final double BAR_SIGN; static { BAR_SIGGN = (double)Math.random(); } } 静态import 能少写几个字：\nimport static java.lang.System.out .... out.println(\u0026#34;test\u0026#34;); .... 异常 异常是Exception类型的对象。 编译器关心称为检查异常的异常，不关心运行时异常，运行时异常大部分都是因为程序逻辑有误。 如果try或catch块有return指令，流程会跳到finally然后再回到return指令。 异常也是多态的，可以只catch或抛出父类异常，有多个catch块时，要注意从小排到大。 如果不处理异常（trycatch），可以声明（throws.. 也就是duck掉），交给调用方法处理，如果上层全部duck掉，最后会交给Java虚拟机处理。 异常处理规则： catch和finally不能没有try。 try与catch之前不能有程序。 try一定要有catch或finally。 只带有finally的try必须要声明异常（抛出）。 IO 储存对象状态的两种方式：\n序列化 写一个纯文本文件 Serializable Serializable接口又称为marker或tag类的标记用接口。\n如果某类是可序列化的，则它的子类也自动化地可以序列号。\n如果某实例变量不能或不应该被序列号，就把它标记为transient（瞬时）的。这种变量有可能属于是动态数据，只可以在执行时求出而不能或不必被存储。\n不可序列化类的可序列化子类在还原时，父类的构造函数会跟创建新的对象一样地执行，transient标记的变量会恢复为默认值（引用恢复为null，primitive主数据类型变成相应的默认值）。\n如果两个对象有引用变量指向相同的对象，在这种情况下只有一个对象会被存储，其他引用会复原成指向该对象。\n对于静态变量，他们不会被序列化，当对象被还原时，静态变量会维持类中原本的样子，而不是存储时的样子。（举例子，对静态变量赋值A后，进行序列化，然后对静态变量赋值B，在对象进行反序列化时，其值为B，序列化保存的是对象的状态，静态变量属于类的状态，因此序列化并不保存静态变量）\n文件 File对象代表文件的路径而不是文件本身，File对象可以用来创建、浏览和删除目录。\n通过BufferedWriter和FileWriter的链接，BufferedWriter可以暂存一堆数据，然后到满的时候再实际写入磁盘，这样就可以减少对磁盘操作的次数。如果想要强制缓冲区立即写入，只要调用writer.flush()这个方法。\n当对象被序列号时，该对象会被赋一个版本识别ID，这个ID叫做serialVersionUID，它是根据类的结构信息计算出来的，如果类在对象被解序列化时有了不同的ID，那么解序列化会失败。解决方案是把serialVersionUID放在class中，让类变化时维持相同的ID，但类的变化要是不能损害解序列号的修改：\n加入新的实例变量（还原时使用默认值）。 在继承层次中加入新的类或删除类。 部分存取层次修改。 将实例变量从瞬时改成非瞬时（还原时使用默认值）。 网络 Socket是个代表两台机器之间网络连接的对象。\nTCP端口是一个16位宽、用来识别服务器上特定程序的数字。0~1023保留给已知的特定服务使用。\n127.0.0.1这个ip地址代表本机。\n工作方式：\n服务器应用程序对特定端口创建出ServerSocket。\nServerSocket serverSock = new ServerSocket(4242); 客户端对服务器应用程序建立Socket连接。\nSocket sock = new Socket(\u0026#34;190.165.1.103\u0026#34;, 4242); 服务器创建出与客户端通信的新Socket。\nSocket sock = serverSock.accept(); 线程 线程只在乎传入Thread的构造函数的参数是否为实现Runnable的类，当把Runnable传给Thread的构造函数时，实际上就是在给Thread取得run()的办法。 闲置、等待其他线程完成、等待串流的数据、等待被占用的对象等都会使进程进入堵塞状态。 一般使用Thread子类来覆盖run()来开启线程这种方式，是用在需要建立出更特殊的Thread的时候，否则一般使用建立实现Runnable的独立类来运行就行。 一旦线程的run()方法完成后，线程就不能重新启动。 同步 使用synchronized这个关键词来修饰方法使它每次只能被单一的线程存取。\n锁不是配在方法上的，是配在对象上的，如果对象有两个同步化的方法，就表示两个线程无法进入同一个方法，也表示两个线程无法进入不同的方法。\n原子操作：如同原子不可分割。\n同步可能导致死锁。\n可以用synchronized来修饰一行或数行指令，通常会以当前对象(this)来同步化。\npublic void go() { do(); synchronized(this) { doA(); doB(); } } 对象有锁，每个被载入的类也有个锁。当对静态的方法做同步化时，Java会使用类本身的锁。\n泛型 泛型基本与处理集合相关。\n//给ArrayList指定的类型会自动地用在Abstactlist上 public class ArrayList\u0026lt;E\u0026gt; extends AbstractList\u0026lt;E\u0026gt; implements List\u0026lt;E\u0026gt;, RandomAccess, Cloneable, java.io.Serializable { public boolean add(E e) {...} } 与集合相关，标识符一般用T，否则一般用E。\n对泛型而言，extends这个关键词代表“是一个\u0026hellip;”，适用于类和接口。\n运用泛型的方法（效果一样）：\n使用定义在类声明的类型参数：\npublic class ArrayList\u0026lt;E\u0026gt; extends AbstractList\u0026lt;E\u0026gt;... （更效率）使用未定义在类声明的类型参数（? super T表示Comparable的类型参数必须是T或者T的父型）：\npublic \u0026lt;T extends Comparable\u0026lt;? super T\u0026gt;\u0026gt; void sort(List\u0026lt;T\u0026gt; list) 在方法参数中使用万用字符\u003c?\u003e是，编译器会阻止任何可能破坏引用参数所指集合的行为，也就是能调用list中任何元素的方法，但不能加入元素。 比较器Comparator\n调用sort(List o)方法代表由list元素上的compareTo()方法来决定排序方法，因此元素必须要实现Comparable接口。\n调用sort(List o， Comparator c)方法代表不会调用list元素的compareTo()方法，而会调用Comparator的compareTo()方法。list元素不需要实现Comparable。\npublic interface Comparator\u0026lt;T\u0026gt; { int compare(T o1, T o2); } 集合Collection 虽然没继承Collection接口，但也看成集合。 数组的类型是在运行期间检查的，但集合的类型检查只会发生在编译期间。 P572 对象的相等 引用相等：堆上同一对象的两个引用 equals()的默认行为是使用==来比较，调用hashCode()会返回相同的结果。 hashCode()默认会返回每个对象特定的序号（大部分的Java版本是根据内存位置计算序号，所以不会有相同的hashcode，如果equals()没有被覆盖过，两个对象永远不会被视为是相同的，因为不同的对象有不同的字节组合）。 对象相等：堆上的两个不同对象在意义上是相同的 需要覆盖hashCode()和equals()，确保两个对象能计算出相同的hashcode，并且参数的equals()比较也能返回true。 如果不覆盖hashCode()，则该两个对象怎样都不会被认为是相同的。 a.equals(b)必须与a.hashCode()==b.hashCode()等值。 但a.hashCode()==b.hashCode()不一定要与a.equals(b)等值。 当尝试用对象来寻找ArrayList中相同的对象（不是用索引），ArrayList会从头找起，但HashSet使用hashcode计算来寻找，速度会快很多。但hashcode相同不一定是相同的对象，故hashcode是用于缩小寻找范围的，最后要用equals()才能认定是否找到了相同的元素。 List 是一种知道索引位置的集合。 可以有多个元素引用相同的对象。 Set 不允许元素重复。 HashSet 当把对象加入HashSet，会执行以下几个步骤检查重复：\n使用对象的hashcode值判断加入的位置，如果集合里没有相同hashcode对象，则HashSet没有重复（即一定重写hashCode()，否则意义上相同的对象会无法判断出来）。 如果hashCode()返回的结果相同，则会调用equals()判断对象是否真的相同。 TreeSet TreeSet会保持集合在有序状态。 集合中的元素必须是有实现Comparable的类型，或，使用重载、取用Comparator参数的构造函数来创建TreeSet（即自己定义比较器）。 Map 使用成对的键值和数据值。 不允许重复的键值。 "},{
  "section": "Blog",
  "slug": "/blog/post-1/",
  "title": "How to build an Application with modern Technology",
  "description": "this is meta description",
  "date": "April 4, 2022",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_420x0_resize_q80_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"184\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_100x100_fill_q80_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Application, Data",
  "tags": "nextjs, tailwind",
  "content":"Nemo vel ad consectetur namut rutrum ex, venenatis sollicitudin urna. Aliquam erat volutpat. Integer eu ipsum sem. Ut bibendum lacus vestibulum maximus suscipit. Quisque vitae nibh iaculis neque blandit euismod.\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\nCreative Design Nam ut rutrum ex, venenatis sollicitudin urna. Aliquam erat volutpat. Integer eu ipsum sem. Ut bibendum lacus vestibulum maximus suscipit. Quisque vitae nibh iaculis neque blandit euismod.\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n"},{
  "section": "Blog",
  "slug": "/blog/post-2/",
  "title": "How to build an Application with modern Technology",
  "description": "this is meta description",
  "date": "April 4, 2022",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_420x0_resize_q80_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"184\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_100x100_fill_q80_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Technology, Data",
  "tags": "technology, tailwind",
  "content":"Nemo vel ad consectetur namut rutrum ex, venenatis sollicitudin urna. Aliquam erat volutpat. Integer eu ipsum sem. Ut bibendum lacus vestibulum maximus suscipit. Quisque vitae nibh iaculis neque blandit euismod.\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\nCreative Design Nam ut rutrum ex, venenatis sollicitudin urna. Aliquam erat volutpat. Integer eu ipsum sem. Ut bibendum lacus vestibulum maximus suscipit. Quisque vitae nibh iaculis neque blandit euismod.\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n"},{
  "section": "Blog",
  "slug": "/blog/post-3/",
  "title": "How to build an Application with modern Technology",
  "description": "this is meta description",
  "date": "April 4, 2022",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_420x0_resize_q80_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"184\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_100x100_fill_q80_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Software",
  "tags": "software, tailwind",
  "content":"Nemo vel ad consectetur namut rutrum ex, venenatis sollicitudin urna. Aliquam erat volutpat. Integer eu ipsum sem. Ut bibendum lacus vestibulum maximus suscipit. Quisque vitae nibh iaculis neque blandit euismod.\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\nCreative Design Nam ut rutrum ex, venenatis sollicitudin urna. Aliquam erat volutpat. Integer eu ipsum sem. Ut bibendum lacus vestibulum maximus suscipit. Quisque vitae nibh iaculis neque blandit euismod.\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n"},{
  "section": "Blog",
  "slug": "/blog/post-4/",
  "title": "牛牛牛",
  "description": "this is meta description",
  "date": "April 4, 2022",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_420x0_resize_q80_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"184\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_100x100_fill_q80_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_huf5f2d24635a285cfc2259aa9741acb2a_4881_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Architecture",
  "tags": "silicon, technology",
  "content":"Nemo vel ad consectetur namut rutrum ex, venenatis sollicitudin urna. Aliquam erat volutpat. Integer eu ipsum sem. Ut bibendum lacus vestibulum maximus suscipit. Quisque vitae nibh iaculis neque blandit euismod.\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\nCreative Design Nam ut rutrum ex, venenatis sollicitudin urna. Aliquam erat volutpat. Integer eu ipsum sem. Ut bibendum lacus vestibulum maximus suscipit. Quisque vitae nibh iaculis neque blandit euismod.\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n"}]
